// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FilterFlag Filter flag.
//
// * D - EXTERNAL.
// * F - LONG_DISTANCE.
// * N - REGIONAL.
// * S - SBAHN.
//
//
// swagger:model filterFlag
type FilterFlag string

const (

	// FilterFlagD captures enum value "D"
	FilterFlagD FilterFlag = "D"

	// FilterFlagF captures enum value "F"
	FilterFlagF FilterFlag = "F"

	// FilterFlagN captures enum value "N"
	FilterFlagN FilterFlag = "N"

	// FilterFlagS captures enum value "S"
	FilterFlagS FilterFlag = "S"
)

// for schema
var filterFlagEnum []interface{}

func init() {
	var res []FilterFlag
	if err := json.Unmarshal([]byte(`["D","F","N","S"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filterFlagEnum = append(filterFlagEnum, v)
	}
}

func (m FilterFlag) validateFilterFlagEnum(path, location string, value FilterFlag) error {
	if err := validate.Enum(path, location, value, filterFlagEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this filter flag
func (m FilterFlag) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFilterFlagEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
