// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReferenceTripRelationToStop The reference trips relation to the stop, which contains it.
//
// * b - BEFORE
//   The reference trip ends before that stop.
// * e - END
//   The reference trips ends at that stop.
// * c - BETWEEN
//   The stop is between reference trips start and end, in other words, the stop is contained within its travel path.
// * s - START
//   The reference trip starts at that stop.
// * a - AFTER
//   The reference trip starts after that stop.
//
//
// swagger:model referenceTripRelationToStop
type ReferenceTripRelationToStop string

const (

	// ReferenceTripRelationToStopB captures enum value "b"
	ReferenceTripRelationToStopB ReferenceTripRelationToStop = "b"

	// ReferenceTripRelationToStopE captures enum value "e"
	ReferenceTripRelationToStopE ReferenceTripRelationToStop = "e"

	// ReferenceTripRelationToStopC captures enum value "c"
	ReferenceTripRelationToStopC ReferenceTripRelationToStop = "c"

	// ReferenceTripRelationToStopS captures enum value "s"
	ReferenceTripRelationToStopS ReferenceTripRelationToStop = "s"

	// ReferenceTripRelationToStopA captures enum value "a"
	ReferenceTripRelationToStopA ReferenceTripRelationToStop = "a"
)

// for schema
var referenceTripRelationToStopEnum []interface{}

func init() {
	var res []ReferenceTripRelationToStop
	if err := json.Unmarshal([]byte(`["b","e","c","s","a"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		referenceTripRelationToStopEnum = append(referenceTripRelationToStopEnum, v)
	}
}

func (m ReferenceTripRelationToStop) validateReferenceTripRelationToStopEnum(path, location string, value ReferenceTripRelationToStop) error {
	if err := validate.Enum(path, location, value, referenceTripRelationToStopEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this reference trip relation to stop
func (m ReferenceTripRelationToStop) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReferenceTripRelationToStopEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
