// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// MessageType Message status
//
// * h - HIM
//   A HIM message (generated through the Hafas Information Manager).
// * q - QUALITY CHANGE
//   A message about a quality change.
// * f - FREE
//   A free text message.
// * d - CAUSE OF DELAY
//   A message about the cause of a delay.
// * i - IBIS
//   An IBIS message (generated from IRIS-AP).
// * u - UNASSIGNED IBIS MESSAGE
//   An IBIS message (generated from IRIS-AP) not yet assigned to a train.
// * r - DISRUPTION
//   A major disruption.
// * c - CONNECTION
//   A connection.
//
//
// swagger:model messageType
type MessageType string

const (

	// MessageTypeH captures enum value "h"
	MessageTypeH MessageType = "h"

	// MessageTypeQ captures enum value "q"
	MessageTypeQ MessageType = "q"

	// MessageTypeF captures enum value "f"
	MessageTypeF MessageType = "f"

	// MessageTypeD captures enum value "d"
	MessageTypeD MessageType = "d"

	// MessageTypeI captures enum value "i"
	MessageTypeI MessageType = "i"

	// MessageTypeU captures enum value "u"
	MessageTypeU MessageType = "u"

	// MessageTypeR captures enum value "r"
	MessageTypeR MessageType = "r"

	// MessageTypeC captures enum value "c"
	MessageTypeC MessageType = "c"
)

// for schema
var messageTypeEnum []interface{}

func init() {
	var res []MessageType
	if err := json.Unmarshal([]byte(`["h","q","f","d","i","u","r","c"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageTypeEnum = append(messageTypeEnum, v)
	}
}

func (m MessageType) validateMessageTypeEnum(path, location string, value MessageType) error {
	if err := validate.Enum(path, location, value, messageTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this message type
func (m MessageType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMessageTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
