// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Message A message that is associated with an event, a stop or a trip.
//
// swagger:model message
type Message struct {

	// Code.
	C int64 `json:"c,omitempty" xml:"c,attr,omitempty"`

	// Category.
	Cat string `json:"cat,omitempty" xml:"cat,attr,omitempty"`

	// Deleted.
	Del int64 `json:"del,omitempty" xml:"del,attr,omitempty"`

	// Distributor message.
	Dm []*DistributorMessage `json:"dm" xml:"dm"`

	// External category.
	Ec string `json:"ec,omitempty" xml:"ec,attr,omitempty"`

	// External link associated with the message.
	Elnk string `json:"elnk,omitempty" xml:"elnk,attr,omitempty"`

	// External text.
	Ext string `json:"ext,omitempty" xml:"ext,attr,omitempty"`

	// Valid from. The time, in ten digit 'YYMMddHHmm' format, e.g. '1404011437' for 14:37 on April the 1st of 2014.
	From string `json:"from,omitempty" xml:"from,attr,omitempty"`

	// Message id.
	// Required: true
	ID *string `json:"id" xml:"id,attr"`

	// Internal text.
	Int string `json:"int,omitempty" xml:"int,attr,omitempty"`

	// Owner.
	O string `json:"o,omitempty" xml:"o,attr,omitempty"`

	// Priority.
	Pr Priority `json:"pr,omitempty" xml:"pr,attr,omitempty"`

	// Message type.
	// Required: true
	T MessageType `json:"t" xml:"t,attr"`

	// Trip label.
	Tl []*TripLabel `json:"tl" xml:"tl"`

	// Valid to. The time, in ten digit 'YYMMddHHmm' format, e.g. '1404011437' for 14:37 on April the 1st of 2014.
	To string `json:"to,omitempty" xml:"to,attr,omitempty"`

	// Timestamp. The time, in ten digit 'YYMMddHHmm' format, e.g. "1404011437" for 14:37 on April the 1st of 2014.
	// Required: true
	Ts *string `json:"ts" xml:"ts,attr"`
}

// Validate validates this message
func (m *Message) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Message) validateDm(formats strfmt.Registry) error {

	if swag.IsZero(m.Dm) { // not required
		return nil
	}

	for i := 0; i < len(m.Dm); i++ {
		if swag.IsZero(m.Dm[i]) { // not required
			continue
		}

		if m.Dm[i] != nil {
			if err := m.Dm[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dm" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Message) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Message) validatePr(formats strfmt.Registry) error {

	if swag.IsZero(m.Pr) { // not required
		return nil
	}

	if err := m.Pr.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("pr")
		}
		return err
	}

	return nil
}

func (m *Message) validateT(formats strfmt.Registry) error {

	if err := m.T.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("t")
		}
		return err
	}

	return nil
}

func (m *Message) validateTl(formats strfmt.Registry) error {

	if swag.IsZero(m.Tl) { // not required
		return nil
	}

	for i := 0; i < len(m.Tl); i++ {
		if swag.IsZero(m.Tl[i]) { // not required
			continue
		}

		if m.Tl[i] != nil {
			if err := m.Tl[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tl" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Message) validateTs(formats strfmt.Registry) error {

	if err := validate.Required("ts", "body", m.Ts); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Message) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Message) UnmarshalBinary(b []byte) error {
	var res Message
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
