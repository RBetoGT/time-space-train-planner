// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Trip A trip (i.e. a train/bus/tram etc.) moves from s start station to a destination station.
//
// swagger:model trip
type Trip struct {

	// Trip ID.
	// Required: true
	ID *string `json:"id" xml:"id"`

	// Trip stop.
	S []*TripStop `json:"s"`

	// Trip label.
	// Required: true
	Tl *TripLabel `json:"tl"`
}

// Validate validates this trip
func (m *Trip) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTl(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Trip) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Trip) validateS(formats strfmt.Registry) error {

	if swag.IsZero(m.S) { // not required
		return nil
	}

	for i := 0; i < len(m.S); i++ {
		if swag.IsZero(m.S[i]) { // not required
			continue
		}

		if m.S[i] != nil {
			if err := m.S[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("s" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Trip) validateTl(formats strfmt.Registry) error {

	if err := validate.Required("tl", "body", m.Tl); err != nil {
		return err
	}

	if m.Tl != nil {
		if err := m.Tl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tl")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Trip) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Trip) UnmarshalBinary(b []byte) error {
	var res Trip
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
