// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReferenceTripLabel It's a compound data type that contains common data items that characterize a reference trip. The con-tents is represented as a compact 3-tuple in XML.
//
// swagger:model referenceTripLabel
type ReferenceTripLabel struct {

	// Category. Trip category, e.g. "ICE" or "RE".
	// Required: true
	C *string `json:"c" xml:"c"`

	// Trip/train number, e.g. "4523".
	// Required: true
	N *string `json:"n" xml:"n"`
}

// Validate validates this reference trip label
func (m *ReferenceTripLabel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateC(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateN(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReferenceTripLabel) validateC(formats strfmt.Registry) error {

	if err := validate.Required("c", "body", m.C); err != nil {
		return err
	}

	return nil
}

func (m *ReferenceTripLabel) validateN(formats strfmt.Registry) error {

	if err := validate.Required("n", "body", m.N); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReferenceTripLabel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReferenceTripLabel) UnmarshalBinary(b []byte) error {
	var res ReferenceTripLabel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
