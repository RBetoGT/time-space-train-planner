// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StationData A transport object which keep data for a station.
//
// swagger:model stationData
type StationData struct {

	// DS100 station code.
	// Required: true
	Ds100 *string `json:"ds100" xml:"ds100"`

	// EVA station number.
	// Required: true
	Eva *int64 `json:"eva" xml:"eva"`

	// List of meta stations. A sequence of station names separated by the pipe symbols ("|").
	Meta string `json:"meta,omitempty" xml:"meta"`

	// Station name.
	// Required: true
	Name *string `json:"name" xml:"name"`

	// List of platforms. A sequence of platforms separated by the pipe symbols ("|").
	P string `json:"p,omitempty" xml:"p"`
}

// Validate validates this station data
func (m *StationData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDs100(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEva(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StationData) validateDs100(formats strfmt.Registry) error {

	if err := validate.Required("ds100", "body", m.Ds100); err != nil {
		return err
	}

	return nil
}

func (m *StationData) validateEva(formats strfmt.Registry) error {

	if err := validate.Required("eva", "body", m.Eva); err != nil {
		return err
	}

	return nil
}

func (m *StationData) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StationData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StationData) UnmarshalBinary(b []byte) error {
	var res StationData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
