// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DistributorMessage An additional message to a given station-based disruption by a specific distributor.
//
// swagger:model distributorMessage
type DistributorMessage struct {

	// Internal text.
	Int string `json:"int,omitempty" xml:"int"`

	// Distributor name.
	N string `json:"n,omitempty" xml:"n"`

	// Distributor type.
	T DistributorType `json:"t,omitempty" xml:"t"`

	// Timestamp. The time, in ten digit 'YYMMddHHmm' format, e.g. '1404011437' for 14:37 on April the 1st of 2014.
	Ts string `json:"ts,omitempty" xml:"ts"`
}

// Validate validates this distributor message
func (m *DistributorMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateT(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DistributorMessage) validateT(formats strfmt.Registry) error {

	if swag.IsZero(m.T) { // not required
		return nil
	}

	if err := m.T.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("t")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DistributorMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DistributorMessage) UnmarshalBinary(b []byte) error {
	var res DistributorMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
