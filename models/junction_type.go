// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// JunctionType The enumeration describes the junction type of a stop.
//
// Regular trains don't have any special junctions so all their stops have JunctionType.NONE. However, wing trains have SPLITs and JOINs at certain locations within their paths. And "Durchbindung" trains have TRANSITIONs, i.e. locations where the train changes its train number and/or category.
//
// Example for a wing train:
//
// Train ICE 123 starts at Munich towards Frankfurt. Train ICE 456 starts at Stuttgart towards Frankfurt. Both trains arrive at the same platform in Frankfurt and are joined (coupled together). The joined train departs from Frankfurt and proceeds to Hannover. In Hannover the trains get split up again into its two constituent parts: ICE 123 and ICE 456. Train ICE 123 departs from Hannover towards its destination Hamburg. Train ICE 456 departs from Hannover towards its destination Berlin. In this case, the stop at Frankfurt would have JunctionType.JOIN and Hannover would have JunctionType.SPLIT.
//
// Example for a "Durchbindung" train:
//
// Train "RE 98765" departs from Mannheim towards Frankfurt. The train arrives as "RE 98765" in Franfurt but departs under the new name "RB 77665" towards Fulda. In this case, the stop at Frankfurt would have JunctionType.TRANSITION.
//
// * t - TRANSITION
//   This stop is a transition station of a 'Durchbindung' train, i.e. the same physical train arrives under one train number/cetegory and departs from this stop under a different train number/category. A transition is represented graphically by a horizontal line with a dot in the middle.
// * s - SPLIT
//   The wing train is split at this stop, i.e. two (or more) trains arrive coupled together as a single train, are split at this stop and depart as separate independent trains on different routes. Those independent trains might or might not be joined again later. A split is represented graphically by one line that is split into two (when viewed from left to right).
// * j - JOIN
//   The wing train is joined at this stop, i.e. two (or more) trains arrive independently on different routes,  get coupled together and depart from this stop as a single train. That joined train might or might not be split again later. A join is represented graphically by two lines that are joined into one (when viewed from left to right).
//
//
// swagger:model junctionType
type JunctionType string

const (

	// JunctionTypeT captures enum value "t"
	JunctionTypeT JunctionType = "t"

	// JunctionTypeS captures enum value "s"
	JunctionTypeS JunctionType = "s"

	// JunctionTypeJ captures enum value "j"
	JunctionTypeJ JunctionType = "j"
)

// for schema
var junctionTypeEnum []interface{}

func init() {
	var res []JunctionType
	if err := json.Unmarshal([]byte(`["t","s","j"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		junctionTypeEnum = append(junctionTypeEnum, v)
	}
}

func (m JunctionType) validateJunctionTypeEnum(path, location string, value JunctionType) error {
	if err := validate.Enum(path, location, value, junctionTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this junction type
func (m JunctionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateJunctionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
