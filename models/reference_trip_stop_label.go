// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReferenceTripStopLabel It's a compound data type that contains common data items that characterize a reference trip stop. The contents is represented as a compact 4-tuple in XML.
//
// swagger:model referenceTripStopLabel
type ReferenceTripStopLabel struct {

	// The eva number of the correspondent stop of the regular trip.
	// Required: true
	Eva *int64 `json:"eva" xml:"eva,attr"`

	// The index of the correspondent stop of the regu-lar trip.
	// Required: true
	I *int64 `json:"i" xml:"i,attr"`

	// The (long) name of the correspondent stop of the regular trip.
	// Required: true
	N *string `json:"n" xml:"n,attr"`

	// The planned time of the correspondent stop of the regular trip.
	// Required: true
	Pt *string `json:"pt" xml:"pt,attr"`
}

// Validate validates this reference trip stop label
func (m *ReferenceTripStopLabel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEva(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReferenceTripStopLabel) validateEva(formats strfmt.Registry) error {

	if err := validate.Required("eva", "body", m.Eva); err != nil {
		return err
	}

	return nil
}

func (m *ReferenceTripStopLabel) validateI(formats strfmt.Registry) error {

	if err := validate.Required("i", "body", m.I); err != nil {
		return err
	}

	return nil
}

func (m *ReferenceTripStopLabel) validateN(formats strfmt.Registry) error {

	if err := validate.Required("n", "body", m.N); err != nil {
		return err
	}

	return nil
}

func (m *ReferenceTripStopLabel) validatePt(formats strfmt.Registry) error {

	if err := validate.Required("pt", "body", m.Pt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReferenceTripStopLabel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReferenceTripStopLabel) UnmarshalBinary(b []byte) error {
	var res ReferenceTripStopLabel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
