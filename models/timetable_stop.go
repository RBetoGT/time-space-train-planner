// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimetableStop A stop is a part of a Timetable.
//
// swagger:model timetableStop
type TimetableStop struct {

	// Arrival element. This element does not have child elements. All information about the arrival is stored in attributes (see the next table).
	Ar *Event `json:"ar,omitempty" xml:"ar,omitempty"`

	// Connection element.
	Conn []*Connection `json:"conn" xml:"conn"`

	// Departure element. This element does not have child elements. All information about the departure is stored in attributes (see the next table).
	Dp *Event `json:"dp,omitempty" xml:"dp,omitempty"`

	// The eva code of the station of this stop. Example '8000105' for Frankfurt(Main)Hbf.
	// Required: true
	Eva *int64 `json:"eva" xml:"eva,attr"`

	// Historic delay element.
	Hd []*HistoricDelay `json:"hd" xml:"hd"`

	// Historic platform change element.
	Hpc []*HistoricPlatformChange `json:"hpc" xml:"hpc"`

	// An id that uniquely identifies the stop. It consists of the following three elements separated by dashes
	// * a 'daily trip id' that uniquely identifies a trip within one day. This id is typically reused on subsequent days. This could be negative.
	// * a 6-digit date specifier (YYMMdd) that indicates the planned departure date of the trip from its start station.
	// * an index that indicates the position of the stop within the trip (in rare cases, one trip may arrive multiple times at one station). Added trips get indices above 100.
	// Example '-7874571842864554321-1403311221-11' would be used for a trip with daily trip id '-7874571842864554321' that starts on march the 31th 2014 and where the current station is the 11th stop.
	//
	// Required: true
	ID *string `json:"id" xml:"id,attr"`

	// Message element.
	M []*Message `json:"m" xml:"m"`

	// Reference to an referenced trip. The substitution or additional trip references the originally planned trip. Note, referenced trip != reference trip
	Ref *TripReference `json:"ref,omitempty" xml:"ref,omitempty"`

	// Reference trip relation element.
	Rtr []*ReferenceTripRelation `json:"rtr" xml:"rtr"`

	// Trip label.
	Tl *TripLabel `json:"tl,omitempty" xml:"tl,omitempty"`
}

// Validate validates this timetable stop
func (m *TimetableStop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEva(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHpc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateM(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRtr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTl(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimetableStop) validateAr(formats strfmt.Registry) error {

	if swag.IsZero(m.Ar) { // not required
		return nil
	}

	if m.Ar != nil {
		if err := m.Ar.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ar")
			}
			return err
		}
	}

	return nil
}

func (m *TimetableStop) validateConn(formats strfmt.Registry) error {

	if swag.IsZero(m.Conn) { // not required
		return nil
	}

	for i := 0; i < len(m.Conn); i++ {
		if swag.IsZero(m.Conn[i]) { // not required
			continue
		}

		if m.Conn[i] != nil {
			if err := m.Conn[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conn" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TimetableStop) validateDp(formats strfmt.Registry) error {

	if swag.IsZero(m.Dp) { // not required
		return nil
	}

	if m.Dp != nil {
		if err := m.Dp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dp")
			}
			return err
		}
	}

	return nil
}

func (m *TimetableStop) validateEva(formats strfmt.Registry) error {

	if err := validate.Required("eva", "body", m.Eva); err != nil {
		return err
	}

	return nil
}

func (m *TimetableStop) validateHd(formats strfmt.Registry) error {

	if swag.IsZero(m.Hd) { // not required
		return nil
	}

	for i := 0; i < len(m.Hd); i++ {
		if swag.IsZero(m.Hd[i]) { // not required
			continue
		}

		if m.Hd[i] != nil {
			if err := m.Hd[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hd" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TimetableStop) validateHpc(formats strfmt.Registry) error {

	if swag.IsZero(m.Hpc) { // not required
		return nil
	}

	for i := 0; i < len(m.Hpc); i++ {
		if swag.IsZero(m.Hpc[i]) { // not required
			continue
		}

		if m.Hpc[i] != nil {
			if err := m.Hpc[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hpc" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TimetableStop) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *TimetableStop) validateM(formats strfmt.Registry) error {

	if swag.IsZero(m.M) { // not required
		return nil
	}

	for i := 0; i < len(m.M); i++ {
		if swag.IsZero(m.M[i]) { // not required
			continue
		}

		if m.M[i] != nil {
			if err := m.M[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("m" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TimetableStop) validateRef(formats strfmt.Registry) error {

	if swag.IsZero(m.Ref) { // not required
		return nil
	}

	if m.Ref != nil {
		if err := m.Ref.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ref")
			}
			return err
		}
	}

	return nil
}

func (m *TimetableStop) validateRtr(formats strfmt.Registry) error {

	if swag.IsZero(m.Rtr) { // not required
		return nil
	}

	for i := 0; i < len(m.Rtr); i++ {
		if swag.IsZero(m.Rtr[i]) { // not required
			continue
		}

		if m.Rtr[i] != nil {
			if err := m.Rtr[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rtr" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TimetableStop) validateTl(formats strfmt.Registry) error {

	if swag.IsZero(m.Tl) { // not required
		return nil
	}

	if m.Tl != nil {
		if err := m.Tl.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tl")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimetableStop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimetableStop) UnmarshalBinary(b []byte) error {
	var res TimetableStop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
